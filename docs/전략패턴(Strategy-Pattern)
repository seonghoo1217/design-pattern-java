# 전략패턴

- 사용자(Client)가 자신에게 맞는 전략(Strategy)을 선택하여 로직을 선택할 수 있다.

전략패턴이란 쉽게 말해 `전략`을 쉽게 변경가능하게 설계하는 패턴이다.

여기서 말하는 `전략`의 정의는 객체의 행위에 대하여 그 행위가 목적을 달성하기 위해 일을 수행하는 방식, 비즈니스 규칙, 문제를 해결하는 알고리즘을 의미한다.

여기서 행위는 메소드이고 행위가 목적을 달성한다는 것은 메소드가 에러를 만나지않고 무사히 실행 후 안전히 종료되는것을 뜻한다.

좀더 사전적인 정의로는 다음과 같이 정의할 수 있다.

> 객체들이 할 수 있는 행위 각각에 대한 전략 클래스를 구현한 후 유사 행위들을 캡슐화한 인터페이스를 정의한다.
그 후 객체의 행위를 동적으로 변경하고 싶은 경우 직접 행위를 수정하지 않고 전략을 바꿔주기만 함으로서 행위를 유연하게 확장하는 방법


## 전략 패턴 사용의 이유
- Solid의 원칙 중 하나인 OCP를 위배하지 않을 수 있다.
- 확장성있는 설계를 위해서

## 전략 패턴의 구현 방법 및 순서
- 전략을 우선적으로 생성한다. 이때  인터페이스를 생성하여 상속받는 구조로 진행할 경우 캡슐화에 위배되지 않는다는 점과 확장성을 고려한 설계가 가능해진다는 이점이 존재한다.
- 다음으로 전략을 설정할 수 있는 메소드를 초기화하여 클래스 내부에 구현한다.
  해당 방법의 경우 기존 메소드를 수정하지 않고 (OCP를 위배하지않고) 값의 유연한 변경이 가능해진다.
- 이제 전략 클래스를 사용하는 Client 객체를 만들어 이용해본다.

## 전략 패턴 사용시 장점

확장성을 고려한 아키텍쳐 설계가 가능해진다. 전략을 바꾸는게 쉽다는 것은 새로운 메소드의 생성이나 수정이 이루어지지 않아도
기존 인터페이스의 상속을 통해 해결할 수 있다는 점에서 확장적인 측면에서 이점이 존재한다.